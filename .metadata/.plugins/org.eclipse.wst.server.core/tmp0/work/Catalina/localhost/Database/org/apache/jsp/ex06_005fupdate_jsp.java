/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-07-15 02:01:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;

public final class ex06_005fupdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 레코드 수정 페이지  -->\r\n");
      out.write("<!--  관련 API import -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// Connect 객체 생성 
Connection conn = null;

String url = "jdbc:oracle:thin:@localhost:1521:XE";
String uid = "scott"; // 데이타베이스 아이디 
String pass = "tiger"; // 데이타베이스 비밀번호 설정

Statement stmt = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
String sql = "";

// 수정 버튼에서 전달받은 값을 변수로 저장 
String empno = request.getParameter("empno");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>레코드 수정 폼</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"style1.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   <h1>레코드 수정 폼</h1>\r\n");
      out.write("   <form action=\"ex06_update_proc.jsp\" method=\"post\">\r\n");
      out.write("      <table>\r\n");
      out.write("         ");

         try {
            // JDBC 드라이버 로드 
            Class.forName("oracle.jdbc.driver.OracleDriver");

            // 데이타베이스 연결 
            conn = DriverManager.getConnection(url, uid, pass);

            // sql 명령어 준비 
            stmt = conn.createStatement();

            // sql 명령어 수행후 결과값을 변수에 받을 수 있도록 준비
            // SELECT * FROM EMP where empno=7369;
            sql = "SELECT * FROM EMP02 WHERE empno = " + empno;
            // 콘솔창에 sql 출력 
            application.log(sql);

            rs = stmt.executeQuery(sql);

            // 행단위로 출력 next()
            // 레코드값의 데이타형에 맞추어서 메서드 사용
            // getInt(), getString(), getDate() ...
            // () 안은 컬럼명이나 인덱스 가능 
            if (rs.next()) {
               out.println("<tr>");
               out.println("<th>EMPNO</th>");
               out.println("<td><input type='number' value='" + rs.getInt("empno") + "' name='empno' readonly /></td>");
               out.println("</tr>");

               out.println("<tr>");
               out.println("<th>ENAME</th>");
               out.println("<td><input type='text' value='" + rs.getString("ename") + "' name='ename' /></td>");
               out.println("</tr>");
               
               out.println("<tr>");
               out.println("<th>JOB</th>");
               out.println("<td><input type='text' value='" + rs.getString("job") + "' name='job' /></td>");
               out.println("</tr>");
               
               out.println("<tr>");
               out.println("<th>MGR</th>");
               out.println("<td><input type='number' value='" + rs.getInt("mgr") + "' name='mgr' /></td>");
               out.println("</tr>");
               
               out.println("<tr>");
               out.println("<th>HIREDATE</th>");
               out.println("<td><input type='date' value='" + rs.getDate("hiredate") + "' name='hiredate' /></td>");
               out.println("</tr>");
               
               out.println("<tr>");
               out.println("<th>SAL</th>");
               out.println("<td><input type='number' value='" + rs.getInt("sal") + "' name='sal' /></td>");
               out.println("</tr>");
               
               out.println("<tr>");
               out.println("<th>COMM</th>");
               out.println("<td><input type='number' value='" + rs.getInt("comm") + "' name='comm' /></td>");
               out.println("</tr>");
               
               out.println("<tr>");
               out.println("<th>DEPTNO</th>");
               out.println("<td><input type='number' value='" + rs.getInt("deptno") + "' name='deptno' /></td>");
               out.println("</tr>");
               
               out.println("<tr><td colspan='2'><input type='submit' value='전송' /> &nbsp;<a href='ex06_allRecord.jsp' class='btn2'>전체 회원 목록</a></td></tr>");

            } //if의 끝

         } catch (Exception e) {
            e.printStackTrace();

         } finally {
            // 리소스 반환 
            try {
               if (conn != null)
            conn.close();
            } catch (Exception e) {
               e.printStackTrace();
            }
         } //finally의 끝
         
      out.write("\r\n");
      out.write("      </table>\r\n");
      out.write("   </form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
