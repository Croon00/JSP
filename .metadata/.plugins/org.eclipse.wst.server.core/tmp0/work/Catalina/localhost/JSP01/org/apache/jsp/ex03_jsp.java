/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-07-09 08:40:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex03_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 int value = 100; 
// 메서드은 선언 영역에서만 선언이 가능
	String myMethod() {
	return "Hello Java";
}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>JSP 문법 - 스크립트릿 Scriptletk</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>JSP 문법 - 스크립트릿</h1>\r\n");
      out.write("<hr />\r\n");
      out.write("<h2>특정 실수를 반올림해서 출력한다.</h2>\r\n");

	double x = 123.456789;
	double y = Math.round(x);
	double z = Math.round(x*100);
	double q = (Math.round(x*100))/100;


      out.write("\r\n");
      out.write("<p> x 값은? ");
      out.print( x );
      out.write("</p>\r\n");
      out.write("<p> y 값은? ");
      out.print( y );
      out.write("</p>\r\n");
      out.write("<p> z 값은? ");
      out.print( z );
      out.write("</p>\r\n");
      out.write("<p> q 값은? ");
      out.print( q );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("<hr />\r\n");
      out.write("<h2> 선언문 변수와 스크립트릿의 변수 테스트</h2>\r\n");
      out.write('\r');
      out.write('\n');
 int value = 200; 
      out.write("\r\n");
      out.write("<!-- 우선순위\r\n");
      out.write("	스크립트릿변수 > 선언문 변수\r\n");
      out.write("	\r\n");
      out.write("	 -->\r\n");
      out.write("\r\n");
      out.write("<p> value 값은? ");
      out.print( value );
      out.write("</p>\r\n");
      out.write("<hr />\r\n");
      out.write("\r\n");
      out.write("\r\n");

	/* String myMethod() {
	return "Hello Java";
}     스크립트릿에서는 메서드 선언 불가능*/


      out.write("\r\n");
      out.write("<hr />\r\n");
      out.write("<h2> 조건문 </h2>\r\n");

	int xx = 100;
	int yy = 50;
	int result;
	// 두 수중 큰 수만 저장
	if(xx > yy){
		result = xx;
	}else if (xx == yy){
		result = -99;
	}else {
		result = yy;
	}


      out.write("\r\n");
      out.write("<p>");
      out.print( xx );
      out.write(" 과/와 ");
      out.print( yy );
      out.write("중 큰 숫자는 ");
      out.print(result );
      out.write("이다.</p>\r\n");
      out.write("<hr />\r\n");
      out.write("<h2>반복문 for</h2>\r\n");

	// 1~10 까지 숫자 출력
	for(int i = 1; i <= 10; i++){
		// i 출력
		/* System.out.println(i);
		// 콘솔창에 출력 */
	


      out.write("\r\n");
      out.write("	<p>");
      out.print( i );
      out.write("</p> <!-- expression  -->\r\n");

	} // 끊어지는 스크립트릿

      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr />\r\n");

	// 스크립트릿안에서의 출력문
	// out.println(변수 또는 리터럴 또는 메서드호출(return 값 있는))
	String userName = "허준";
	out.println(userName + "님 오늘도 수고하셨습니다. <br>");
	out.println(56 + " <br> X <br>" + 78 + "<br> = <br>" + (56*78));

      out.write("\r\n");
      out.write("<hr />\r\n");
      out.write("<h2>반복문 for2</h2>\r\n");
      out.write("\r\n");

	// 1~30까지의 숫자 중에서 3의 배수만 출력
	for (int i = 1; i <= 30; i++){
		if (i%3==0){
			out.println(i + " ");
		}
	}


      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr />\r\n");
      out.write("<p>");

	// 1~30까지의 숫자 중에서 3의 배수만 출력
	for (int i = 1; i <= 30; i++){
		if (i%3==0){
			
      out.write("\r\n");
      out.write("			");
      out.print( i );
      out.write("&nbsp;&nbsp;\r\n");

		}
	}


      out.write("</p>\r\n");
      out.write("<hr />\r\n");
      out.write("<h2> while문 </h2>\r\n");
      out.write("<ul>\r\n");

	int cnt = 1;
	while(cnt <= 5){
		out.println("<li>" + cnt + " 번: Hello world <li>");
		cnt++;
	}


      out.write("\r\n");
      out.write("</ul>\r\n");
      out.write("\r\n");
      out.write("<hr />\r\n");
      out.write("<h2> 2 중 for문</h2>\r\n");

	for (int i = 0; i < 3; i++) {
		out.println("<h3>제목입니다.</h3>");
		out.println("<ul>");
		for (int j = 0; j < 2; j++) {
			out.println("<li> 목록" + j + "</li>");
		}
		out.println("</ul>");
		out.println("<hr>");
	}


      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr />\r\n");
      out.write("<h2> 배열 선언과 출력</h2>\r\n");

	int[] num_arr = {10, 56, 77, 34, 100};
	out.println(num_arr); // 주소값이 나옴
	out.println("<p align='center'>");
	for(int i = 0; i < num_arr.length; i++){
		out.println(num_arr[i]+ "   "); // 세로로 출력하려면 <br>
	}
	out.println("</p>");


      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr />\r\n");
      out.write("<h2> 구구단 출력</h2>\r\n");
      out.write("\r\n");
  int a = 2;
	for(int i = 0; i < 3; i++){
		out.println(a + "단" + "&nbsp;&nbsp;&nbsp;"); 
		out.println(a+1 + "단" + "&nbsp;&nbsp;&nbsp;");
		out.println(a+2 + "단");
		out.println("<br>");
		for(int j = 1; j < 11; j++){
			out.println(a + " X " + j + " = " + a*j+"&nbsp;");
			out.println(a+1 + " X " + j + " = " + (a+1)*j + "&nbsp;");
			out.println(a+2 + " X " + j + " = " + (a+2)*j);
			out.println("<br>");
		}
		a = a+3;
	}
	


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
