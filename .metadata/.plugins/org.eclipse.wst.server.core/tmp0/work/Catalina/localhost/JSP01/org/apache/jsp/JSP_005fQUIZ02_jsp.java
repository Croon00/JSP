/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-07-09 08:24:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class JSP_005fQUIZ02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 String Client = "홍길동"; 

		


	double x=100;
	double y=50;
	double mulXY(){
		return x*y;
	}
	double divXY(){
		return Math.round(x/y)*100;
	}



   	int calc(int x, int y, String z){
	if(z.equals("나누기")){
		int qqq = x/y;
		return x/y;
	}
	else if(z.equals("곱하기")){
		return x*y;
	}
	return x*y;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Quiz02</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<p>우중충한 장마로 주말에도 장마는 계속될 것 같지만,</p>\r\n");
      out.write("<p>");
      out.print(Client );
      out.write("님의 마음만큼은 밝기를 바랍니다.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>");
      out.print(x );
      out.write(" 곱하기 ");
      out.print(y );
      out.write(' ');
      out.write('=');
      out.write(' ');
      out.print(mulXY() );
      out.write("</p>\r\n");
      out.write("<p>");
      out.print(x );
      out.write(" 나누기 ");
      out.print(y );
      out.write(' ');
      out.write('=');
      out.write(' ');
      out.print(divXY() );
      out.write("</p>\r\n");
      out.write("\r\n");

	int z = (int)(Math.random()*100000);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>비밀번호는 ");
      out.print(z );
      out.write("입니다.</p>\r\n");
      out.write("\r\n");
 int sum = 0;
	int sum2 =0;
	for(int i = 10; i< 51; i++){
	sum +=i;
	
}
	
	for(int i = 1; i< 551; i++){
	sum2 +=i;
	
}
	
      out.write("\r\n");
      out.write("	<p>10~50까지의 누적합 = ");
      out.print(sum );
      out.write("</p>\r\n");
      out.write("	<p>1~550까지의 누적합 = ");
      out.print(sum2 );
      out.write("</p>\r\n");

	for(int i=50; i<101; i++){
		if(i%7 == 0 || i%9==0){
			out.println("7이나 9의 배수:"+i+"<br>");
		}
	}


      out.write("\r\n");
      out.write("\r\n");
 String[] fruits ={"사과", "포도", "수박","바나나","자몽"};
for(int i = 0; i < fruits.length; i++){
		out.println(fruits[i]+","); // 세로로 출력하려면 <br>
	}out.println("로 구성되어있습니다.");
	
	for (int i = 0; i < fruits.length; i++) {

		out.println("<li>" + fruits[i]+ "</li>");
	}

      out.write("\r\n");
      out.write("\r\n");
 int[] abc ={12, 34, 55, -90, -65, 88, 200};
int min = 100000;
int max = 0;
int sum3 = 0;
for(int i=0; i<abc.length; i++){
	if(min>abc[i]){
		min = abc[i];
	}
	if(max<abc[i]){
		max = abc[i];
	}
	sum3 = sum3 + abc[i];
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>가장 큰 숫자 = ");
      out.print(max );
      out.write(" 가장 작은 숫자 ");
      out.print(min );
      out.write(" 배열의 평균");
      out.print(sum3/abc.length );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>calc( 100, 5, 나누기)호출 => ");
      out.print(calc(100, 5, "나누기") );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
