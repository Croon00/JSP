/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-07-12 01:21:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class quiz02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

String user = "고길동";
int x = 10, y = 3;

	int randomNumber() {
		// (int)(Math.random()*(최대값-최소값+1))+최소값
		int result = (int)(Math.random()*(99999-10000+1))+10000;
		return result;
	}
	
	

		int sum_nm(int n, int m) {
		int sum = 0;
		for (int i=n; i<=m; i++) {
			sum+= i;
		}
		return sum;
	}
	

	// 전체가 하나의 클래스
	String calc(int n1, int n2, String sign) {
		String result="";
		if (sign.equals("곱하기")) {
			result = n1 + " 곱하기 "  + n2 + " = " + (n1*n2);
		} else if (sign.equals("나누기")) {
			result = n1 + " 나누기 "  + n2 + " = " + (n1/(double)n2);
		}
		
		return result;
	}
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>퀴즈</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("* {\r\n");
      out.write("	text-align: center\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>Quiz</h1>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>01. 고객의 이름과 오늘의 인사말을 변수를 이용하여 선언하고 출력하여라</h2>\r\n");
      out.write("	<!--\r\n");
      out.write("01. 고객의 이름과 오늘의 인사말을 변수를 이용하여 선언하고 출력하여라 \r\n");
      out.write("\r\n");
      out.write("고객명 : ?\r\n");
      out.write("\r\n");
      out.write("오늘의 인사말 : \r\n");
      out.write("    우중충한 장마로 주말에도 장마는 계속될 것 같지만, \r\n");
      out.write("    ? 님의 마음 만큼은 맑길 바랍니다. \r\n");
      out.write("-->\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<p>\r\n");
      out.write("		우중충한 장마로 주말에도 장마는 계속될 것 같지만,\r\n");
      out.write("		<b>");
      out.print(user);
      out.write("</b>\r\n");
      out.write("		님의 마음 만큼은 맑길 바랍니다.\r\n");
      out.write("	</p>\r\n");
      out.write("	<p>\r\n");
      out.write("		우중충한 장마로 주말에도 장마는 계속될 것 같지만,\r\n");
      out.write("		<!-- \r\n");
      out.write("		문자열변수.substring(인덱스, 글자수)\r\n");
      out.write("		 -->\r\n");
      out.write("		");
      out.print(user.substring(0, 1));
      out.write("** 님의 마음 만큼은 맑길 바랍니다.\r\n");
      out.write("	</p>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>02. 두수의 곱셈과 나눗셈 연산 결과를 출력하여라.</h2>\r\n");
      out.write("\r\n");
      out.write("	<!-- 02. 두수의 곱셈과 나눗셈 연산 결과를 출력하여라. \r\n");
      out.write("나누기의 경우 소숫점 2째 자리까지 출력한다. \r\n");
      out.write("\r\n");
      out.write("	?   곱하기  ?   =   ?  \r\n");
      out.write("	?   나누기  ?   =   ?  \r\n");
      out.write("	 -->\r\n");
      out.write("\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<p>");
      out.print(x);
      out.write("\r\n");
      out.write("		곱하기\r\n");
      out.write("		");
      out.print(y);
      out.write("\r\n");
      out.write("		=\r\n");
      out.write("		");
      out.print(x * y);
      out.write("</p>\r\n");
      out.write("	<p>");
      out.print(x);
      out.write("\r\n");
      out.write("		나누기\r\n");
      out.write("		");
      out.print(y);
      out.write("\r\n");
      out.write("		=\r\n");
      out.write("		");
      out.print(((Math.round(x* 100.0 / y )) / 100.0));
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>03. Math.random()을 이용하여 5자리 정수로 구성된 비밀번호를 출력한다.</h2>\r\n");
      out.write("	<!-- \r\n");
      out.write("	비밀번호는 ????? 입니다.\r\n");
      out.write("	10000 ~ 99999\r\n");
      out.write("	 -->\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<p>비밀번호는 ");
      out.print(randomNumber() );
      out.write(" 입니다. </p>\r\n");
      out.write("	<p>비밀번호는 ");
      out.print(randomNumber() );
      out.write(" 입니다. </p>\r\n");
      out.write("	<p>비밀번호는 ");
      out.print(randomNumber() );
      out.write(" 입니다. </p>\r\n");
      out.write("	<p>비밀번호는 ");
      out.print(randomNumber() );
      out.write(" 입니다. </p>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>04. n~m까지의 누적합을 출력하여라. </h2>\r\n");
      out.write("	<!-- \r\n");
      out.write("	10 ~ 50 까지의 누적합  =    ? \r\n");
      out.write("	1 ~ 550 까지의 누적합  =    ? \r\n");
      out.write("	 -->\r\n");
      out.write("	 \r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<ul>\r\n");
      out.write("		<li>10 ~ 50 까지의 누적합  =  ");
      out.print(sum_nm(10, 50)  );
      out.write("</li>\r\n");
      out.write("		<li>1 ~ 550 까지의 누적합  =  ");
      out.print(sum_nm(1, 550)  );
      out.write("</li>\r\n");
      out.write("	</ul>	\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>05.  100 ~ 50 사이의 숫자중에서 7이나 9의 배수만 출력하여라. </h2>\r\n");
      out.write("	");

		for (int i=100; i>=50; i--) {
			if ((i%7 == 0) || (i%9==0)) {
				out.println(i);
			}
		}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>06.   다음 배열을 선언하고 목록문단을 이용하여 출력하여라. </h2>\r\n");
      out.write("	<!-- \r\n");
      out.write("	배열은   사과, 포도, 수박, 바나나, 자몽으로 구성되어있습니다.  \r\n");
      out.write("\r\n");
      out.write("      	● 사과 \r\n");
      out.write("	● 포도 \r\n");
      out.write("	● 수박 \r\n");
      out.write("	● 바나나\r\n");
      out.write("	● 자몽\r\n");
      out.write("	\r\n");
      out.write("	 -->\r\n");
      out.write("	<ul >\r\n");
      out.write("	");

		String[] fruit_arr = {"사과", "포도", "수박", "바나나", "자몽" };
		
		for (int i=0; i<fruit_arr.length; i++) {
			out.println("<li>" + fruit_arr[i] + "</li>");
		}
	
      out.write("\r\n");
      out.write("	</ul>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>3, 6, 9  구구단을 출력하여라. </h2>\r\n");
      out.write("	");

	for (int i = 3; i <= 9; i+=3) {
		out.println("<h2>" + i  + "단 </h2>");
		out.println("<hr>");
		for (int j = 1; j<=9; j++) {
			out.println(i + " X " + j + " = " + (i*j) + "<br>");
		}
		out.println("<hr>");
	}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>08.  다음 배열을 선언하고 가장 큰 수,  가장 작은 수,  배열의 평균을 출력하여라. </h2>\r\n");
      out.write("	<p>배열 숫자 =  [  12, 34, 55, -90, -65, 88, 200]</p>\r\n");
      out.write("	\r\n");
      out.write("	");

		int[] num_arr = { 12, 34, 55, -90, -65, 88, 200};
		int min = num_arr[0];
		int max = num_arr[0];
		int sum = 0;
		double avg = 0;
		for (int i=0; i<num_arr.length; i++) {
			sum += num_arr[i];
			if (num_arr[i] > max) {
				max = num_arr[i];
			}
			if (num_arr[i] < min) {
				min = num_arr[i];
			}
		}
		avg = Math.round((sum/(double)num_arr.length)*100);
		
		out.println("<p> 가장 큰 수 = " + max + "</p>");
		out.println("<p> 가장 작은 수 = " + min + "</p>");
		out.println("<p> 배열의 평균 = " + avg + "</p>");
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>. 출력 결과를 참조하여 연산자에 따른 연산 결과를 출력하여라. (메서드, 제어문 이용)</h2>\r\n");
      out.write("	<!-- \r\n");
      out.write("			calc( 100, 5, 나누기) 호출 =>  \r\n");
      out.write("			\r\n");
      out.write("					100 / 5  = ?\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("				calc( 100, 5, 곱하기) 호출 =>  \r\n");
      out.write("			\r\n");
      out.write("					100 * 5  = ?\r\n");
      out.write("	 -->\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<p>\r\n");
      out.write("		calc( 100, 5, 나누기) 호출 => <br>\r\n");
      out.write("		");
      out.print(calc(100, 5, "나누기"));
      out.write("\r\n");
      out.write("	</p>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<p>\r\n");
      out.write("		calc( 100, 5, 곱하기) 호출 => <br>\r\n");
      out.write("		");
      out.print(calc(100, 5, "곱하기"));
      out.write("\r\n");
      out.write("	</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
